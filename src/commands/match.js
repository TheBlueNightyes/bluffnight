import { createCommandConfig, logger } from 'robo.js'

export const config = createCommandConfig({
	description: 'are you meant to be?',
	options: [{
		name: 'partner1',
		description: 'rizzler',
		type: 'user',
		required: true
	}]
	// {
	//  	name: 'partner2',
	//  	description: 'rizzed',
	//  	type: 'user',
	//  	required: false
	// }
})

export default (interaction) => {
	logger.info(`Match generated by ${interaction.user}`)
	const partner1 = interaction.options.getUser('partner1');
	// const partner2 = interaction.options.getUser('partner2');

	function getRandomIntInclusive(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1) + min)
    }

    let rating = getRandomIntInclusive(1, 100) 

	const responses25 = [
		"I'd reconsider.",
		"Did you come up short?",
		"Gonna need a prenup"
	];

	const responses50 = [
		"Try someone uglier next time?",
		"Might want to make an investment in flowers",
		"Getting warmer"
	];

	const responses75 = [
		"What is this rizz?",
		"Good chemistry!",
		"Make a reservation"
	];

	const responses99 = [
		"Tap already.",
		"Get a room",
		"Hotshot"
	];

	const responses100 = [
		"Your perfect!",
		"Baby time!",
		"Whos top?"
	];

	// if (partner2 != 'null' && rating <= 25) {
	// 	const matchResponses25 = responses25[Math.floor(Math.random() * responses25.length)];
    // 	interaction.reply(`${partner1} ${partner2}\n:broken_heart: ${rating}%\n> ${matchResponses25}`);
	// }
	if (rating <= 25) {
		const matchResponses25 = responses25[Math.floor(Math.random() * responses25.length)];
    	interaction.reply(`${interaction.user} ${partner1}\n:broken_heart: ${rating}%\n> ${matchResponses25}`);
	}
	// else if (partner2 != 'null' && rating <= 50) {
	// 	const matchResponses50 = responses50[Math.floor(Math.random() * responses50.length)];
    // 	interaction.reply(`${partner1} ${partner2}\n:mending_heart: ${rating}%\n> ${matchResponses50}`);
	// }
	else if (rating <= 50) {
		const matchResponses50 = responses50[Math.floor(Math.random() * responses50.length)];
    	interaction.reply(`${interaction.user} ${partner1}\n:mending_heart: ${rating}%\n> ${matchResponses50}`);
	}
	// else if (partner2 != 'null' && rating <= 75) {
	// 	const matchResponses75 = responses75[Math.floor(Math.random() * responses75.length)];
    // 	interaction.reply(`${partner1} ${partner2}\n:gift_heart: ${rating}%\n> ${matchResponses75}`);
	// }
	else if (rating <= 75) {
		const matchResponses75 = responses75[Math.floor(Math.random() * responses75.length)];
    	interaction.reply(`${interaction.user} ${partner1}\n:gift_heart: ${rating}%\n> ${matchResponses75}`);
	}
	// else if (partner2 != 'null' && rating <= 99) {
	// 	const matchResponses99 = responses99[Math.floor(Math.random() * responses99.length)];
    // 	interaction.reply(`${partner1} ${partner2}\n:heartpulse: ${rating}%\n> ${matchResponses99}`);
	// }
	else if (rating <= 99) {
		const matchResponses99 = responses99[Math.floor(Math.random() * responses99.length)];
    	interaction.reply(`${interaction.user} ${partner1}\n:heartpulse: ${rating}%\n> ${matchResponses99}`);
	}
	// else if (partner2 != 'null' && rating == 100) {
	// 	const matchResponses100 = responses100[Math.floor(Math.random() * responses100.length)];
    // 	interaction.reply(`${partner1} ${partner2}\n:sparkling_heart: ${rating}%\n> ${matchResponses100}`);
	// }
	else if (rating == 100) {
		const matchResponses100 = responses100[Math.floor(Math.random() * responses100.length)];
    	interaction.reply(`${interaction.user} ${partner1}\n:sparkling_heart: ${rating}%\n> ${matchResponses100}`);
	}
};